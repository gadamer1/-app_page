{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadLabelList),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadLabelList),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postLabelList),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchPostLabelList),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(labelSaga);\n\nimport { all, fork, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_LABELLIST_REQUEST, LOAD_LABELLIST_SUCCESS, LOAD_LABELLIST_FAILURE, POST_LABELLIST_REQUEST, POST_LABELLIST_SUCCESS } from '../reducers/label';\n\nfunction loadLabelListAPI() {\n  return axios.get('/label/list');\n}\n\nfunction loadLabelList() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadLabelList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadLabelListAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return console.log(result);\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: LOAD_LABELLIST_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: LOAD_LABELLIST_FAILURE,\n            error: _context.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchLoadLabelList() {\n  return _regeneratorRuntime.wrap(function watchLoadLabelList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_LABELLIST_REQUEST, loadLabelList);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction postLabelListAPI(label) {\n  return axios.post('/label/list', {\n    label: label\n  });\n}\n\nfunction postLabelList(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function postLabelList$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(postLabelListAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return console.log(result);\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: POST_LABELLIST_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context3.next = 15;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 15;\n          return put({\n            type: POST_LABELLIST_FAILURE,\n            error: _context3.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction watchPostLabelList() {\n  return _regeneratorRuntime.wrap(function watchPostLabelList$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(POST_LABELLIST_REQUEST, postLabelList);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function labelSaga() {\n  return _regeneratorRuntime.wrap(function labelSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLoadLabelList), fork(watchPostLabelList)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:\\webdev\\-app_page\\front\\sagas\\label.js"],"names":["loadLabelList","watchLoadLabelList","postLabelList","watchPostLabelList","labelSaga","all","fork","put","call","takeLatest","axios","LOAD_LABELLIST_REQUEST","LOAD_LABELLIST_SUCCESS","LOAD_LABELLIST_FAILURE","POST_LABELLIST_REQUEST","POST_LABELLIST_SUCCESS","loadLabelListAPI","get","result","console","log","type","data","error","postLabelListAPI","label","post","action","POST_LABELLIST_FAILURE"],"mappings":";;;;yBAQUA,a;;;yBAiBAC,kB;;;yBAQAC,a;;;yBAiBAC,kB;;;yBAIeC,S;;AAtDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,sBAAT,EAAiCC,sBAAjC,EAAyDC,sBAAzD,EAAiFC,sBAAjF,EAAyGC,sBAAzG,QAAuI,mBAAvI;;AAEA,SAASC,gBAAT,GAA4B;AACxB,SAAON,KAAK,CAACO,GAAN,CAAU,aAAV,CAAP;AACH;;AAED,SAAUjB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMQ,IAAI,CAACQ,gBAAD,CAAV;;AAFvB;AAEcE,UAAAA,MAFd;AAAA;AAGQ,iBAAMC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAN;;AAHR;AAAA;AAIQ,iBAAMX,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAET,sBADA;AAENU,YAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQH,UAAAA,OAAO,CAACI,KAAR;AATR;AAUQ,iBAAMhB,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAER,sBADA;AAENU,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUtB,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAACE,sBAAD,EAAyBX,aAAzB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASwB,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7B,SAAOf,KAAK,CAACgB,IAAN,CAAW,aAAX,EAA0B;AAAED,IAAAA,KAAK,EAALA;AAAF,GAA1B,CAAP;AACH;;AAED,SAAUvB,aAAV,CAAwByB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMnB,IAAI,CAACgB,gBAAD,EAAmBG,MAAM,CAACL,IAA1B,CAAV;;AAFvB;AAEcJ,UAAAA,MAFd;AAAA;AAGQ,iBAAMC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAN;;AAHR;AAAA;AAIQ,iBAAMX,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAEN,sBADA;AAENO,YAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQH,UAAAA,OAAO,CAACI,KAAR;AATR;AAUQ,iBAAMhB,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAEO,sBADA;AAENL,YAAAA,KAAK;AAFC,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUpB,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACK,sBAAD,EAAyBZ,aAAzB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,kBAAD,CADE,EAENK,IAAI,CAACH,kBAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, call, takeLatest } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\nimport { LOAD_LABELLIST_REQUEST, LOAD_LABELLIST_SUCCESS, LOAD_LABELLIST_FAILURE, POST_LABELLIST_REQUEST, POST_LABELLIST_SUCCESS } from '../reducers/label';\r\n\r\nfunction loadLabelListAPI() {\r\n    return axios.get('/label/list');\r\n}\r\n\r\nfunction* loadLabelList() {\r\n    try {\r\n        const result = yield call(loadLabelListAPI);\r\n        yield console.log(result)\r\n        yield put({\r\n            type: LOAD_LABELLIST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_LABELLIST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadLabelList() {\r\n    yield takeLatest(LOAD_LABELLIST_REQUEST, loadLabelList)\r\n}\r\n\r\nfunction postLabelListAPI(label) {\r\n    return axios.post('/label/list', { label });\r\n}\r\n\r\nfunction* postLabelList(action) {\r\n    try {\r\n        const result = yield call(postLabelListAPI, action.data);\r\n        yield console.log(result)\r\n        yield put({\r\n            type: POST_LABELLIST_SUCCESS,\r\n            data: result.data,\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: POST_LABELLIST_FAILURE,\r\n            error: e,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchPostLabelList() {\r\n    yield takeLatest(POST_LABELLIST_REQUEST, postLabelList)\r\n}\r\n\r\nexport default function* labelSaga() {\r\n    yield all([\r\n        fork(watchLoadLabelList),\r\n        fork(watchPostLabelList),\r\n\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}